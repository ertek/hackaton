// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require(["handlebars", "jquery", "jquery-cookie", "underscore", "backbone", "geoPosition", "async!http://maps.google.com/maps/api/js?sensor=false&v=3"], function(Handlebars) {
    var MapView, MarkerList, MarkerModel, namespace;
    namespace = "Mapas";
    MarkerModel = (function(superClass) {
      extend(MarkerModel, superClass);

      function MarkerModel() {
        return MarkerModel.__super__.constructor.apply(this, arguments);
      }

      MarkerModel.prototype.initialize = function() {};

      return MarkerModel;

    })(Backbone.Model);
    MarkerList = (function(superClass) {
      extend(MarkerList, superClass);

      function MarkerList() {
        return MarkerList.__super__.constructor.apply(this, arguments);
      }

      MarkerList.prototype.model = MarkerModel;

      MarkerList.prototype.parse = function(data) {
        if (data.features) {
          return data.features;
        } else {
          return data;
        }
      };

      MarkerList.prototype.initialize = function(opts) {
        if (opts) {
          if (opts.url) {
            return this.url = opts.url;
          }
        }
      };

      MarkerList.prototype.comparator = function(marker) {
        return marker.get('id');
      };

      return MarkerList;

    })(Backbone.Collection);
    MapView = (function(superClass) {
      extend(MapView, superClass);

      function MapView() {
        this.geolocationErrorCallback = bind(this.geolocationErrorCallback, this);
        return MapView.__super__.constructor.apply(this, arguments);
      }

      MapView.prototype.el = $('#map');

      MapView.prototype.center = null;

      MapView.prototype.map_id = "#my_map";

      MapView.prototype.map = null;

      MapView.prototype.width = '100%';

      MapView.prototype.height = '100%';

      MapView.prototype.markers = [];

      MapView.prototype.centerMarker = null;

      MapView.prototype.bounds = null;

      MapView.prototype.opts = {};

      MapView.prototype.storedPosition = function() {
        var lat, lng;
        lat = $.cookie('lat');
        lng = $.cookie('lng');
        if (lat && lng) {
          return {
            lat: lat,
            lng: lng
          };
        } else {
          return false;
        }
      };

      MapView.prototype.initialize = function(opts) {
        if (opts) {
          this.opts = opts;
          if (opts.width) {
            this.width = opts.width;
          }
          if (opts.height) {
            this.height = opts.height;
          }
        } else {
          opts = {};
        }
        if (this.storedPosition()) {
          this.center = this.storedPosition();
          if ($(this.el).length) {
            return this.render(opts);
          }
        } else {
          return this.getBrowserGeolocation();
        }
      };

      MapView.prototype.render = function(opts) {
        var map_options;
        $(this.el).append("<div id='" + this.map_id + "' style='width: " + this.width + "; height: " + this.height + ";'></div>");
        map_options = {
          zoom: 12,
          center: new google.maps.LatLng(this.center.lat, this.center.lng)
        };
        this.map = new google.maps.Map(document.getElementById(this.map_id), map_options);
        this.bounds = new google.maps.LatLngBounds();
        if (opts.yourPositionMarker === true) {
          this.setCenterMarker(new google.maps.LatLng(this.center.lat, this.center.lng), opts.centerPin);
        }
        if (opts.url) {
          return this.fetchMarkers(opts.url, opts.pinsImage, opts.pinsBigImage);
        }
      };

      MapView.prototype.setCenterMarker = function(position, pinImage) {
        this.centerMarker = new google.maps.Marker({
          position: position,
          map: this.map,
          icon: pinImage,
          title: "Mi posici√≥n"
        });
        return this.bounds.extend(this.centerMarker.getPosition());
      };

      MapView.prototype.fetchMarkers = function(url, pinsImage, pinsBigImage) {
        var list, self;
        if (pinsImage == null) {
          pinsImage = null;
        }
        if (pinsBigImage == null) {
          pinsBigImage = null;
        }
        list = new MarkerList({
          url: url
        });
        self = this;
        return list.fetch({
          success: function() {
            var infowindow;
            infowindow = null;
            $("#lista").html(null);
            $("#loading").hide();
            list.forEach(function(m, i) {
              var contentString, domicilio, lat, lng, marker_id, nombre, template;
              if (m.get('geometry') || m.get('ubicacion')) {
                marker_id = m.get('id') || m.get('pk');
                lat = 0;
                lng = 0;
                if (m.get('geometry')) {
                  lat = m.get('geometry')['coordinates'][1];
                  lng = m.get('geometry')['coordinates'][0];
                }
                if (m.get('ubicacion')) {
                  lat = m.get('ubicacion')['coordinates'][1];
                  lng = m.get('ubicacion')['coordinates'][0];
                }
                self.markers[marker_id] = new google.maps.Marker({
                  position: new google.maps.LatLng(lat, lng),
                  map: self.map,
                  title: "H",
                  icon: pinsImage
                });
                nombre = "";
                domicilio = "";
                if (m.get('properties')) {
                  nombre = m.get('properties').nombre;
                  domicilio = m.get('properties').domicilio;
                } else {
                  nombre = m.get('nombre');
                  domicilio = m.get('domicilio');
                }
                $("#lista").append('<div id="list_item_' + marker_id + '" class="ubicacion card-header"> <b>' + nombre + '</b> <p>Domicilio: ' + domicilio + '</p></div>');
                $("#list_item_" + marker_id).on('mouseover', function(evt) {
                  return self.markers[marker_id].setIcon(pinsBigImage);
                });
                $("#list_item_" + marker_id).on('mouseout', function(evt) {
                  return self.markers[marker_id].setIcon(pinsImage);
                });
                if (self.opts.popupTemplate) {
                  template = Handlebars.compile(self.opts.popupTemplate);
                  contentString = template({
                    m: m
                  });
                  google.maps.event.addListener(self.markers[marker_id], 'click', function() {
                    var last_model;
                    if (infowindow) {
                      infowindow.close();
                    }
                    infowindow = new google.maps.InfoWindow({
                      content: contentString,
                      disableAutoPan: false
                    });
                    infowindow.open(self.map, self.markers[marker_id]);
                    last_model = m;
                  });
                }
                return self.bounds.extend(self.markers[marker_id].getPosition());
              }
            });
            console.log(self.markers);
            return self.map.fitBounds(self.bounds);
          }
        });
      };

      MapView.prototype.getBrowserGeolocation = function() {
        if (geoPosition.init()) {
          return geoPosition.getCurrentPosition(this.storePosition, this.geolocationErrorCallback);
        } else {
          return console.log("Error al localizar");
        }
      };

      MapView.prototype.storePosition = function(position) {
        $.cookie('lat', position.coords.latitude);
        $.cookie('lng', position.coords.longitude);
        console.log(this);
        window.map_view.center = {
          'lat': position.coords.latitude,
          'lng': position.coords.longitude
        };
        return window.map_view.render(window.map_view.opts);
      };

      MapView.prototype.geolocationErrorCallback = function(err) {
        var position;
        if (err.code === 1) {
          console.log("Denied by user.");
          position = {
            coords: {
              latitude: -28.4601593,
              longitude: -65.7642746
            }
          };
          return this.storePosition(position);
        }
      };

      return MapView;

    })(Backbone.View);
    window.MapView = MapView;
    return load_app();
  });

}).call(this);
